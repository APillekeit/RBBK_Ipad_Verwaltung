<analysis>
The AI engineer successfully guided the application from its initial state through several rounds of feature additions, bug fixes, and significant infrastructure work. Initially, the focus was on refining core functionalities, like contract validation and student management, addressing UI/UX feedback, and resolving logic errors such as iPad status inconsistencies. A major undertaking involved dockerizing the entire application for a specified Ubuntu/MongoDB 4.4 environment, which required extensive debugging of build failures related to Node.js versions, network issues during package installs, duplicate API prefixes, and ESLint errors. Finally, the engineer began implementing a new set of product requirements, starting with the backend for global settings and an iPad inventory export, showcasing a methodical approach to complex, multi-faceted tasks.
</analysis>

<product_requirements>
The user required a web-based iPad management tool for administering iPad-student assignments and contracts.
**Key Features & Workflows:**
1.  **iPad Management:** Excel upload (ITNr), view, status update (defekt/gestohlen/verfügbar), filter.
2.  **Student Management:** Excel upload (unique key), view details (personal, guardians, assignments, contracts), delete (cascading: dissolve assignment, free iPad, delete history/contracts).
3.  **Assignment Management:** Auto-assignment; filtered view (name, class, **IT-number**); XLSX export (**fixed columns: AusleiheDatum, Typ; removed Karton; Geburtstag format TT.MM.JJJJ; derive AusleiheDatum from assigned_at**); dissolve (individual/batch, auto on iPad status); visual warning for contract validation issues (**formula: (NutzungEinhaltung == NutzungKenntnisnahme) OR (ausgabeNeu == ausgabeGebraucht)**), **option to upload new contract for validation-failed assignments (warning dismisses if new contract is fieldless)**.
4.  **Contract Management:** PDF upload (up to 50 files), auto-assign based on fields, manual assignment for unzugewiesen contracts, view/download current/historical, view/delete unassigned. **Automatic assignment by filename (Vorname_Nachname) on upload**.
5.  **Data Management:** Manual student/iPad deletion (with warnings); data protection cleanup (> 5 years old student/contract data); timestamps.
6.  **UI/UX:** Admin login, clear UI, improved upload hints, **global settings for default Typ (Apple iPad) and Pencil (ohne Apple Pencil)**.
7.  **Docker Deployment:** Complete Docker setup on Ubuntu 24.04.3 LTS with MongoDB 4.4, Nginx, frontend (Node 20+), backend (Python 3.11), accessible via **any IP**, with all PDF/Excel libraries.
8.  **Other Features:** **Automatic logout (30 min timeout) with display/notice**, password/username change, **inventory list import (Anforderung 2 export) supporting XLSX/XLS, handling existing/new data.**
</product_requirements>

<key_technical_concepts>
-   **FastAPI**: Python backend, Pydantic for data validation.
-   **React**: JavaScript frontend, Shadcn UI, Radix UI.
-   **MongoDB**: NoSQL database, UUIDs instead of ObjectIDs.
-   **Docker / Docker Compose**: Containerization and orchestration (Ubuntu 24.04.3 LTS, Node 20+, Mongo 4.4, Nginx).
-   **Pandas, Openpyxl, XlsxWriter, NumPy**: Python for Excel processing.
-   **PyPDF2**: Python for PDF processing.
-   **Axios**: Frontend API calls.
</key_technical_concepts>

<code_architecture>

├──                   # FastAPI backend
│   ├──       # Python dependencies (updated)
│   ├──              # Main FastAPI app, API endpoints, MongoDB interactions (heavily modified)
│   ├──             # Dockerfile for backend (created, updated for system deps, Python 3.11)
│   └──                   # Environment variables (MONGO_URL, IPAD_DB_NAME)
├──                  # React frontend
│   ├──           # Node.js dependencies and scripts (dependencies implicitly updated via yarn)
│   ├──     # Tailwind CSS configuration
│   ├──      # PostCSS configuration
│   ├──                   # Environment variables (REACT_APP_BACKEND_URL=/api)
│   ├──                # Static assets
│   ├──                   # React source code
│   │   ├──           # Entry point
│   │   ├──             # Main React component, routing, state, API calls, UI (heavily modified)
│   │   ├──            # Component styles
│   │   ├──          # Global styles
│   │   ├── 
│   │   │   └──            # Shadcn UI components (used, not modified directly)
│   │   └── 
│   │       └──   # Custom hook for toast notifications
│   └──             # Dockerfile for frontend (created, updated for Node 20+, yarn, network)
├──                     # Nginx configuration for Docker
│   ├──             # Main Nginx config (created)
│   └──           # Default server config (created, updated for universal IP)
├──                # MongoDB initialization script for Docker
│   └──                # MongoDB setup script (created, lint error fixed)
├──                     # Test directory
├──                   # Utility scripts
├──         # Docker Compose main file (created, updated for universal IP, volumes)
├──     # Docker Compose development file (created)
├── # Docker Compose for minimal build (created)
├──                # Environment variables for Docker (created, updated for universal IP)
├──            # Script to start Docker setup (created, updated for dynamic names, libs test)
├──             # Script to stop Docker setup (created)
├──                # Script for IP setup (created, later removed/deprecated)
├──        # Script for robust frontend build (created)
├──        # Script to fix Node.js version (created)
├──     # Script to fix Docker ContainerConfig error (created)
├──        # Python script to test PDF/Excel libs in Docker (created)
├──                  # Project documentation
├──           # Docker specific README (created, updated)
├──            # Installation guide (created, updated)
├──               # Libraries documentation (created)
└──          # Troubleshooting guide (created, updated)

-   
    -   **Importance**: Core backend logic.
    -   **Changes Made**: Contract validation formula update (); Student detail view () and cascading delete () endpoints; iPad status consistency fix (logic for setting  to  when status is verfügbar);  cleanup endpoint; new endpoint for assignment-specific contract upload ();  and  for global settings;  for inventory list export.
-   
    -   **Importance**: Docker image definition for backend.
    -   **Changes Made**: Created for Python 3.11-slim; added , , , , ,  for PDF/Excel library dependencies.
-   
    -   **Importance**: Main React component.
    -   **Changes Made**: Student detail viewer modal; added View/Delete buttons to ; integrated upload icon () and logic for assignment-specific contract upload; **fixed duplicate  prefix issue by removing explicit  from all Axios calls; resolved 'Settings' identifier redeclaration by aliasing  icon import to .**
-   
    -   **Importance**: Frontend environment variables.
    -   **Changes Made**:  changed from absolute URL to  for universal IP access.
-   
    -   **Importance**: Docker image definition for frontend.
    -   **Changes Made**: Created; removed 
changed 1 package in 4s (yarn is pre-installed); **updated base image to **; added  logic for network robustness.
-   
    -   **Importance**: Orchestrates Docker services.
    -   **Changes Made**: Created; configured MongoDB 4.4; defined , ,  services with volumes; ports bound to ; updated environment variables.
-   
    -   **Importance**: Nginx server configuration.
    -   **Changes Made**: Created;  updated to include  (wildcard) for universal IP access; adjusted proxy pass.
</code_architecture>

<pending_tasks>
-   **Frontend Implementation**: Create UI for Global Settings and Bestandsliste-Export.
-   **Assignment Export Corrections**: Adjust column names, remove Karton, correct Geburtstag format, set AusleiheDatum.
-   **Session Management**: Implement 30-minute auto-logout, display time, and logout notice.
-   **User Authentication**: Implement functionality to change password and username.
-   **Assignment Filters**: Extend filters to include IT-number.
-   **Assignment Display**: Show student class in assignments.
-   **Data Restoration**: Implement import of inventory list (XLSX/XLS).
</pending_tasks>

<current_work>
Immediately before this summary request, the AI engineer was implementing new product requirements, specifically focusing on **Priorität 1: Bestandsliste-Export mit globalen Einstellungen**.
The following backend features have been implemented in :
1.  **Global Settings API:**
    *   : An endpoint to retrieve global settings (currently iPad Type and Pencil defaults).
    *   : An endpoint to update global settings, with default values Apple iPad and ohne Apple Pencil if not already present in MongoDB.
2.  **Bestandsliste-Export API:**
    *   : An endpoint to generate and export an Excel (.xlsx) inventory list of all iPads, including associated student details if an assignment exists.
    *   The export includes all user-specified columns: , , , , , , , , , , , , , , , , , , , , , , , , .
    *   Date formatting is handled to .
    *   Columns are left empty if no student assignment exists.
    *   The Excel file name includes a timestamp.
These backend components are implemented; the corresponding frontend implementation is pending.
</current_work>

<optional_next_step>
The next step is to either build the frontend for the recently implemented global settings and inventory export, or proceed with correcting the assignment export.
</optional_next_step>
